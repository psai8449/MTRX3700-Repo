`timescale 1ps/1ps
module mic_load #(parameter N, BUFF_DEPTH) (
    input rst,
    input adclrc,
	input bclk, // Assume a 18.432 MHz clock
	input adcdat,
    dstream.out fifo_out
);
    // Assume that i2c has already configured the CODEC.

    logic redge_adclrc, adclrc_q; // Rising edge detect on ADCLRC to sense left channel
    always_ff @(posedge  bclk) begin : adclrc_rising_edge_ff
        adclrc_q <= adclrc;
    end
    assign redge_adclrc = ~adclrc_q & adclrc; // rising edge detected!


    integer bit_index;
    always_ff @(posedge bclk) begin : bit_index_logic
        if (rst) begin
            bit_index <= 0;
        end
        else begin
            if (redge_adclrc) begin
                bit_index <= 1; // reset as ADCLRC has just risen
            end
            else if (bit_index == 0) begin
                bit_index <= 0;
            end
            else if (bit_index < N+1) begin  // Extra index N used for FIFO write enable.
                bit_index <= bit_index + 1;
            end
        end
    end

    logic [N-1:0] temp_rx_data;
    always_ff @(posedge bclk) begin : rx_logic
        if (redge_adclrc) begin
            temp_rx_data[N-1] <= adcdat;
        end
        else if (bit_index < N) begin
            temp_rx_data[N-1-bit_index] <= adcdat;
        end
    end
	 
//	 always_ff @(posedge bclk) begin
//		if( bit_index == N-1) fifo_out.data <= {temp_rx_data[N-1:1], adcdat};
//	 end

    /* FIFO */
//    logic empty, full;
//    logic handshake, read_en;
//    assign handshake = fifo_out.ready & fifo_out.valid;
//    assign read_en = handshake | (~fifo_out.valid & ~empty); // Read from the FIFO if there was a handshake OR if the FIFO is not empty and data is currently not valid.
//    fifo #(.W(N), .D(BUFF_DEPTH)) fifo_u (.clk(bclk),.rst(rst),.we(bit_index == N),.re(read_en),.data_in(temp_rx_data),.data_out(fifo_out.data),.empty(empty),.full(full));
//    always_ff @(posedge bclk) begin : output_valid_logic
//        if (rst) fifo_out.valid <= 1'b0;
//        else if (~empty) fifo_out.valid <= 1'b1;
//        else if (handshake & empty) fifo_out.valid <= 1'b0;
//    end

	assign fifo_out.data = temp_rx_data;
	assign fifo_out.valid = bit_index == N;

endmodule

